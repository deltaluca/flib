package flib.util;

import haxe.io.Output;
import flib.util.BitFields;

class BitOut {
	public var o:Output;

	public var bit:Int;
	public var cbyte:Int;

	private var writenBytes:Int;

	//----------------------------------------------------------------------------------------------

	public function new(o:Output) {
		this.o = o;

		writenBytes = 0;
		bit = 0;
		cbyte = 0;
	}

	//----------------------------------------------------------------------------------------------

	private inline function writeBits(val:Int,num:Int) {
		for(i in 0...num) {
			var posa = 7-bit;
			var pos2 = num-i-1;
			var bitval = (((val&(1<<pos2))>>>pos2));

			cbyte |= bitval << posa;

			if(++bit==8) {
				o.writeByte(cbyte);
				writenBytes++;
				cbyte = 0;
				bit = 0;
			}
		}
	}

	//----------------------------------------------------------------------------------------------

	public inline function flushBits() {
		if(bit!=0) writeBits(0,8-bit);
		writenBytes = 0;
	}
	public inline function getBytes() {
		if(bit!=0) return writenBytes + 1;
		else return writenBytes;
	}

	//----------------------------------------------------------------------------------------------

	public inline function writeBytes(bytes,pos,length) {
		flushBits();
		o.writeBytes(bytes,pos,length);
	}

	//----------------------------------------------------------------------------------------------

	public inline function writeByte(v) {
		flushBits();
		o.writeByte(v);
	}
	public inline function writeUInt16(v) {
		flushBits();
		o.writeUInt16(v);
	}
	public inline function writeUInt24(v) {
		flushBits();
		o.writeUInt24(v);
	}

	//----------------------------------------------------------------------------------------------

	public inline function writeInt8(v) {
		flushBits();
		o.writeInt8(v);
	}
	public inline function writeInt16(v) {
		flushBits();
		o.writeInt16(v);
	}
	public inline function writeInt24(v) {
		flushBits();
		o.writeInt24(v);
	}
	public inline function writeInt32(v) {
		flushBits();
		o.writeInt32(v);
	}

	//----------------------------------------------------------------------------------------------

	public inline function writeDouble(v) {
		flushBits();
		o.writeDouble(v);
	}

	//----------------------------------------------------------------------------------------------

	public inline function writeUnsigned(val:Int,?nb:Int=0) {
		if(nb==0) nb = BitFields.bits_unsigned(val);
		writeBits(val,nb);
	}
	public inline function writeSigned(val:Int,?nb:Int=0) {
		if(nb==0) nb = BitFields.bits_signed(val);
		writeBits(val,nb);
	}
	public inline function writeFloating(val:Float,?nb:Int=0) {
		var vt = BitFields.floating_int(val);
		if(nb==0) nb = BitFields.bits_signed(vt);
		writeBits(vt,nb);
	}

	//----------------------------------------------------------------------------------------------

	//le sigh, sign extending my arse adobe making negative integers need 5 bytes is retarded!

	public inline function encWriteUnsigned30(v:Int) encWriteUnsigned((v&0x3fffffff));
	public inline function encWriteUnsigned(v:Int) {
		encWriteSigned(v);
	}
	public inline function encWriteSigned(bv:Int) {
		var e = ((bv >>> 28));
		var n = ((bv & ((1 << 28) - 1)));
		var d = (n >> 21) & 0x7F;
		var c = (n >> 14) & 0x7F;
		var b = (n >> 7) & 0x7F;
		var a = n & 0x7F;
		if( b != 0 || c != 0 || d != 0 || e != 0 ) {
			writeByte(a | 0x80);
			if( c != 0 || d != 0 || e != 0 ) {
				writeByte(b | 0x80);
				if( d != 0 || e != 0 ) {
					writeByte(c | 0x80);
					if( e != 0 ) {
						writeByte(d | 0x80);
						writeByte(e);
					} else
						writeByte(d);
				} else
					writeByte(c);
			} else
				writeByte(b);
		} else
			writeByte(a);
	}

	//----------------------------------------------------------------------------------------------

	public inline function writeFixed(val:Float) {
		var top = Std.int(val);
		var bot = Std.int((val - Std.int(val))*65536.0);

		writeUInt16(bot);
		writeInt16(top);
	}
	public inline function writeFixed8(val:Float) {
		var top = Std.int(val);
		var bot = Std.int((val-Std.int(val))*256.0);

		writeByte(bot);
		writeInt8(top);
	}
	public inline function writeFloat16(num:Float) {
		if(num==0.0) writeUInt16(0);
		else if(num==Math.POSITIVE_INFINITY) writeUInt16(0x7c00);
		else if(num==Math.NEGATIVE_INFINITY) writeUInt16(0xfc00);
		else if(Math.isNaN(num)) writeUInt16(0xffff);
		else {
			var sign = if(num<0) 1 else 0;
			if(num<0) num = -num;
			if(num < Math.pow(2,-25)) writeUInt16(0);
			else {
				if(num < Math.pow(2,-15)) {
					var sig = Std.int(num*Math.pow(2,25));
					sig &= 0x3ff;
					writeByte(sig&0xff);
					writeByte((sig>>>8)|(sign<<7));
				}else {
					var expb = 0;
					while(num< 1.0) { expb--; num*=2.0; }
					while(num>=2.0) { expb++; num*=0.5; }

					var expb2 = expb+16;
					if(expb2<0) writeUInt16(0);
					else if(expb2 >= 0x1f) writeUInt16(0x7c00 | (sign<<15));
					else {
						var sig = Std.int((num-1)*1024.0);
						sig &= 0x3ff;
						writeByte(sig&0xff);
						writeByte((sig>>>8)|(expb2<<2)|(sign<<7));
					}
				}
			}
		}
	}

	//----------------------------------------------------------------------------------------------

	public inline function writeString(v:String) {
		for(i in 0...v.length) writeByte(v.charCodeAt(i));
		writeByte(0);
	}

	public inline function writeStringNum(v:String,num:Int) {
		for(i in 0...num) writeByte(v.charCodeAt(i));
	}
}
