package flib.util;

import haxe.io.BytesInput;
import haxe.io.BytesOutput;

class BitFields {
	public inline static function bits_signed(v:Int) {
        if (v == 0) return 0;
        else if (v == -1) return 2;
        else {
            var sign = if (v < 0) 1 else 0;
            var cbit = 31;
            while (((v & (1<<cbit)) >>> cbit) == sign) cbit--;
            return cbit + 2;
        }
	}

	public inline static function bits_unsigned(v:Int) {
        if (v == 0) return 0;
        else {
            var cbit = 31;
            while ((((1 << cbit) & v) >>> cbit) == 0) cbit--;
            return cbit + 1;
        }
	}

	public inline static function floating_int(v:Float) {
        return Std.int(v);
	}

	public inline static function bits_floating(v:Float) return bits_signed(floating_int(v));
}
