package;

import haxe.Int32;
import haxe.io.BytesOutput;
import haxe.io.BytesInput;
import haxe.io.Bytes;

import neko.Sys;
import neko.Lib;
import neko.io.File;
import neko.io.Path;

import flib.abc.Types;
import flib.swf.Types;

import flib.util.BitFields;
	
using StringTools;

typedef SIZE = {size:Int,str:String};

class Main {
	static function parse(src:haxe.io.Input):Swf {
		var reader = new flib.swf.Reader(src);
		var swf = reader.readSwf();
		return swf;
	}
	static function grab(src:String,keeplib=true):{swc:Bool,src:String,swf:Swf} {
		var swc = StringTools.endsWith(src,".swc");
		if(swc) {
#if windows
			if(Sys.command("7z",["-y","e",src,"library.swf"])!=0) {
				Lib.println("ERROR please make sure 7z has been added to PATH variable");
				Sys.exit(1);
			}
#elseif unix
			Sys.command("unzip",[src,"library.swf"]);
#else
			Lib.println("Please specify compiler flag windows or unix on compilation of flib");
			Sys.exit(1);
#end
			src = "library.swf";
		}

		var inp = File.read(src,true);
		var swf = parse(inp);
		inp.close();
		
		if(swc && !keeplib) {
#if windows
			Sys.command("del",["library.swf"]);
#else
			Sys.command("rm",["library.swf"]);
#end
		}

		return {swc:swc,src:src,swf:swf};
	}

	static function main() {		
		var args = Sys.args();
		if(args.length<1) {
			Lib.println("For help use --help option");
			Sys.exit(1);
		}
	
		if(args[0]=="--help") {
			Lib.println("Usage: flib lib.swf/swc");
			Lib.println("\tvar x(flibget_x,flibset_x), has 'x' removed, and flibget_x flibset_x turned to native getter/setters. flibget_x flibset_x must be inlined to avoid haxe code being destroyed");
			Lib.println("\t@:ns(\"flibdel\") inline function x() {} get's removed from the swc entirely, make sure this method is also inlined and is not used dynamicaly through down-casting/reflection or else it will break haxe code");
			Lib.println("\tfunction flibopts_#(){} with # replaced by integer, ensures that constructors for the class have the correct number of optional arguments set in the swf/swc as haxe makes them all optional");
			Lib.println("\n");
			Lib.println("Alternatively: flib --report lib.swf/swc to report method sizes throughout");
			Lib.println("\n");
			Lib.println("ALTERNATIVELY: flib --combine preloader.swf main.swf out.swf to combine the two swf's together into a single swf loading the preloader in first frame, and on dispatch of a flash event \"nextFrame\" will continue to frame 2 and load the main swf. Properties of the final swf is taken from main.swf (dimensions,bgcolor,fps)");
			Lib.println("\n");
			Lib.println("AND NOW!!: flib --externs lib.swf [package]+ to generate externs for haxe for the specific packages in the lib");
			Sys.exit(0);
		}

		switch(args[0]) {
		case "--report":
			if(args.length<2) {
				Lib.println("ERROR --report needs argument");
				Sys.exit(0);
			}
			report(args[1]);

		case "--combine":
			if(args.length<4) {
				Lib.println("ERROR --combine needs 3 arguments");
				Sys.exit(0);
			}
			var pre  = args[1];
			var main = args[2];
			var outf = args[3];
			combine(pre,main,outf);

		case "--externs":
			if(args.length<3) {
				Lib.println("ERROR --externs should have atleast 4 args");
				Sys.exit(0);
			}
			var lib = args[1];
			externs(lib,args.slice(2));

		default:
			process(args[0]);
		}
	}

	static function report(src:String) {
		var swf = grab(src,false).swf;

		//----------------------------------
		//process ABC blocks for size report

		var ret:Array<SIZE> = [];
		var cls = new Hash<Int>();
		for(tag in swf.tags) {
			switch(tag) {
			default:
			case tDoABC(abcdata):
				doreport(abcdata,ret,cls);
			case tDefABC(_,_,abcdata):
				doreport(abcdata,ret,cls);
			}
		}

		var total = 0;
		ret.sort(function (a,b) return b.size-a.size);
		for(i in ret) {
			Lib.println(i.str);
			total += i.size;
		}

		Lib.println("\n");
		Lib.println("--------");
		var carr = new Array<SIZE>();
		for(x in cls.keys())
			carr.push({size:cls.get(x),str:x});
		carr.sort(function (a,b) return b.size-a.size);

		for(i in carr) {
			var str = ""+duh(i.size);
			while(str.length<10) str += " ";
			str += i.str;
			Lib.println(str);
		}

		Lib.println("\n");
		Lib.println("--------");
		Lib.println("total: "+duh(total));
	}

	static function process(src:String) {
		var swcswf = grab(src);
		var swf = swcswf.swf;

		//------------------------------------------------------------------------------------------
		//process ABC blocks for replacements and deletions.
		var ntags = [];
		for(tag in swf.tags) {
			ntags.push(switch(tag) {
			default:
				tag;
			case tDoABC(abcdata):
				tDoABC(doABC(abcdata));
			case tDefABC(lazy,name,abcdata):
				tDefABC(lazy,name,doABC(abcdata));
			});
		}
		swf.tags = ntags;
	
		//------------------------------------------------------------------------------------------
		//create new swf
#if windows
		Sys.command("del",[swcswf.src]);
#else
		Sys.command("rm",[swcswf.src]);
#end
		var out = File.write(swcswf.src,true);
		var writer = new flib.swf.Writer(out);
		writer.writeSwf(swf);
		out.flush();
		out.close();

		//------------------------------------------------------------------------------------------
		//inject new swf

		if(swcswf.swc) {
#if windows
			Sys.command("7z",["-y","a","-tzip",src,"library.swf"]);
			Sys.command("del",["library.swf"]);
#else
		    Sys.command("zip",[src,"-d","library.swf"]);
			Sys.command("zip",[src,"library.swf"]);
			Sys.command("rm",["library.swf"]);
#end
		}
	}

	static function combine(pre_src:String,main_src:String,out_src:String) {
		//want to grab file data for stage size etc.
		var mainswf = grab(main_src,false).swf;
		var fattr:Tag = null;
		var setbg:Tag = null;
		for(tag in mainswf.tags) {
			switch(tag) {
			default:
			case tFileAttributes(_,_,_,_,_):
				fattr = tag;
			case tSetBackgroundColor(_):
				setbg = tag;
			}
			if(fattr!=null && setbg!=null) break;
		}

		//grab template!
		var template = parse(new haxe.io.BytesInput(haxe.Resource.getBytes("bin/template.swf"))); 

		//build binary data tags
		var inp = File.read(pre_src,true);
		var predat = tDefineBinaryData(0xfff0,inp.readAll());
		inp.close();

		var inp = File.read(main_src,true);
		var maindat = tDefineBinaryData(0xfff2,inp.readAll());
		inp.close();

		//remove template metadata
		template.tags.splice(1,1);

		//replace old file-attr and bg-col tags
		template.tags.shift();
		template.tags.shift();
		template.tags.unshift(setbg);
		template.tags.unshift(fattr);

		//and swap width-height etc
		template.width     = mainswf.width;
		template.height    = mainswf.height;
		template.compress  = mainswf.compress;
		template.version   = mainswf.version;
		template.framerate = mainswf.framerate;
		//framecount should remain 2!

		//insert binary data
		template.tags.insert(5, predat);
		template.tags.insert(7, maindat);

		//append symbol data
		var symbols = switch(template.tags[4]) {
			default: null;
			case tSymbolClass(xs): xs;
		};
		symbols.push({
			tag:0xfff0,
			name:"LoaderBytes"
		});

		template.tags.insert(7, tSymbolClass([
			{
				tag:0xfff2,
				name:"MainBytes"
			}
		]));

		//write out to file :)
		var out = File.write(out_src,true);
		var writer = new flib.swf.Writer(out);
		writer.writeSwf(template);
		out.flush();
		out.close();
	}
	
	//----------------------------------------------------------------------------------------------

	static function externs(libsrc:String,packages:Array<String>) {
		var swf = grab(libsrc,false).swf;
	
		function doABC_externs(abcdata:Bytes) {
			var reader = new flib.abc.Reader(new BytesInput(abcdata));
			var abc = reader.readABC();

			var string = callback(string,abc);
			var multiname = callback(multiname,abc);	

			var proc = [];	
			for(i in 0...abc.instances.length) {
				var it = abc.instances[i];
				var clsname = multiname(it.name);
				for(pckg in packages) {
					if(StringTools.startsWith(clsname,pckg+"."))
						proc.push({it:it, cls:abc.classes[i], name:clsname});
				}
			}

			for(ixy in proc) {
				var name = ixy.name;
				var it = ixy.it;
				var cls = ixy.cls;

				var pckg = name.substr(0,name.lastIndexOf("."));
				var clsname = name.substr(pckg.length+1);

var out = "package "+pckg+";\n";
	out+= "extern class "+clsname+" {\n";

				function print_method(methid:Int,?name,?overriden=false) {
	out+= "    public ";
					if(overriden) out += "override ";
					out += "function "+name+"(";
					var meth = abc.methods[methid];
					for(i in 0...meth.param_types.length) {
						if(i!=0) out += ",";

						var name =
							if(meth.param_names.length==0) "p"+i
							else string(meth.param_names[i]);

						out += name+":"+multiname(meth.param_types[i]);

						var opt = i - (meth.param_types.length-meth.optionals.length);
						if(opt>=0) {
							var opt = meth.optionals[opt];
							var optval = "";
							switch(opt.kind) {
							case nsOther(x):
								switch(x) {
								case 0: optval = "null";
								case 1: optval = string(opt.value);
								case 3: optval = Std.string(abc.cpool.ints[opt.value-1]);
								case 4: optval = Std.string(abc.cpool.uints[opt.value-1]);
								case 6: optval = Std.string(abc.cpool.doubles[opt.value-1]);
								case 10: optval = "false";
								case 11: optval = "true";
								default:
									trace("oh no "+Std.string(opt.kind));
								}
							default:
								trace("oh no "+Std.string(opt.kind));	
							}
							if(optval!="")
								out += "="+optval;
						}
					}
					out += "):"+multiname(meth.return_type)+";\n";
				}

				print_method(it.iinit,"new");

				//deferred to gather getters and setters
				var props = new Hash<{getter:Int,setter:Int,name:String}>();

				for(t in it.traits) {
					switch(t.data) {
					case tdMethod(type,_,mid):
						var name = multiname(t.name);
						if(Type.enumEq(type,mtMethod))
							print_method(mid,name,t.overriden);
						else {
							var prop = props.get(name);
							if(prop==null) props.set(name, prop = {getter:-1,setter:-1,name:name});

							if(Type.enumEq(type,mtGetter))
								 prop.getter = mid;
							else prop.setter = mid;
						}
					case tdSlot(_,_,type,_,_):
						var name = multiname(t.name);
						var type = multiname(type);
	out += "    public var "+name+":"+type+";\n";
					default:
					}
				}

				for(prop in props) {
	out += "    public var "+prop.name+"(";
					if(prop.getter!=-1) out += "default" else out += "never";
					out += ",";
					if(prop.setter!=-1) out += "default" else out += "never";
					out += "):";

					var mt = if(prop.getter==-1) prop.setter else prop.getter;
					out += multiname(abc.methods[mt].return_type);

					out += ";\n";
				}

	out+= "}\n";

				Lib.println(out);
			}
		}

		for(tag in swf.tags) {
			switch(tag) {
			default:
			case tDoABC(abcdata):			 doABC_externs(abcdata);
			case tDefABC(lazy,name,abcdata): doABC_externs(abcdata);
			}
		}
	}

	//----------------------------------------------------------------------------------------------

	private static inline function duh(bytes:Int) {
		$(mixin fix100(x) (Std.int((x)*100)/100));

		if     (bytes<1024) return bytes+"B";
		else if(bytes<1024*1024) return fix100(bytes/1024)+"KiB";
		else return fix100(bytes/1024/1024)+"MiB";
	}

	private static function string(abc:ABC, n:Int) {
		return abc.cpool.strings[n-1];
	}
	private static function multiname(abc:ABC, n:Int) {
		if(n==0) return "Dynamic";
		var n2 = abc.cpool.names[n-1];
		var ret = switch(n2) {
			case mQName(_,ns,name):
				var pck = abc.cpool.nspaces[ns-1];
				var pckstr = string(abc,pck.name);
				var nstr = string(abc,name);
				if(pckstr.length!=0) pckstr+"."+nstr;
				else nstr;
			case mRTQName(_,name): string(abc,name);
			case mMultiname(_,name,_): string(abc,name);
			default: "";
		}
		return switch(ret) {
			case "int": "Int";
			case "Number": "Float";
			case "void": "Void";
			case "Boolean": "Bool";
			case "Function": "Dynamic"; // yay
			default: ret;
		}
	}

	private static function doreport(abcdata:Bytes, ret:Array<SIZE>, cls:Hash<Int>) {
		var reader = new flib.abc.Reader(new BytesInput(abcdata));
		var abc = reader.readABC();
			
		var string = callback(string,abc);
		var multiname = callback(multiname,abc);	

		var names = new Array<String>();
		var cnames = new Array<String>();
		for(i in abc.instances) {
			var clsname = multiname(i.name);
			for(t in i.traits) {
				switch(t.data) {
				case tdMethod(type,_,mid):
					var name = multiname(t.name);
					if(Type.enumEq(type,mtMethod))
						names[mid] = clsname+"::"+name;
				 	else if(Type.enumEq(type,mtGetter))
						names[mid] = clsname+"::set "+name;
					else
						names[mid] = clsname+"::get "+name;
					cnames[mid] = clsname;
				default:
				}
			}
			names[i.iinit] = clsname+"::new";
			cnames[i.iinit] = clsname;
		}

		var ind = 0;
		for(i in abc.classes) {
			var clsname = multiname(abc.instances[ind].name);
			ind++;
			for(t in i.traits) {
				switch(t.data) {
				case tdMethod(type,_,mid):
					var name = multiname(t.name);
					if(Type.enumEq(type,mtMethod))
						names[mid] = clsname+"."+name;
				 	else if(Type.enumEq(type,mtGetter))
						names[mid] = clsname+".set "+name;
					else
						names[mid] = clsname+".get "+name;
					cnames[mid] = clsname;
				default:
				}
			}
			names[i.cinit] = clsname+".__init__";
			cnames[i.cinit] = clsname;
		}

		for(m in abc.mbodies) {
			if(names[m.method]!=null) {
				var str = ""+duh(m.avm.length);
				while(str.length<10) str += " ";
				str += names[m.method];
				ret.push({size:m.avm.length,str:str});

				var cname = cnames[m.method];
				var cn = if(cls.exists(cname)) cls.get(cname) else 0;
				cls.set(cname,cn+m.avm.length);
			}
		}
	}

	//----------------------------------------------------------------------------------------------
	
	private static function doABC(abcdata:Bytes) {
		var reader = new flib.abc.Reader(new BytesInput(abcdata));
		var abc = reader.readABC();
		
		$(mixin string(n) abc.cpool.strings[n-1]);
		$(mixin multiname(n) ({
			var n2 = abc.cpool.names[n-1];
			switch(n2) {
			case mQName(_,_,name): string(name);
			case mRTQName(_,name): string(name);
			case mMultiname(_,name,_): string(name);
			default: "";
			}
		}));
		$(mixin flibdel(n) ({
			var n2 = abc.cpool.names[n-1];
			switch(n2) {
			case mQName(_,ns,name):
				var n3 = abc.cpool.nspaces[ns-1];
				string(n3.name);
			default: "";
			}
		}));

		//class constructor optionals
		for(i in abc.instances) {
			var meth = abc.methods[i.iinit];
			var count = -1;

			for(t in i.traits) {
				switch(t.data) {
				case tdMethod(type,x,y):
					if(Type.enumEq(type,mtMethod)) {
						var flibd = flibdel(t.name);
						var name = multiname(t.name);
						if(name.substr(0,9)=="flibopts_")
							count = Std.parseInt(name.substr(9));
					}
				default:
				}
			}

			if(count==-1) continue;

			while(meth.optionals.length != count)
				meth.optionals.shift();
		}
	
		var methodid = new Array<Int>();
		var id = 0;
		for(i in abc.methods) methodid.push(id++);
		
		$(mixin getsets(instances)
			for(i in instances) {
				var properties = new Hash<{x:Trait,y:Trait}>();
				var flibrem = new Hash<Void>();
				
				for(t in i.traits) {
					switch(t.data) {
						case tdMethod(type,x,y):
							if(Type.enumEq(type,mtMethod)) {
								var flibd = flibdel(t.name);
								var name = multiname(t.name);
								
								if(flibd=="flibdel")
									flibrem.set(name,null);
								if(flibd=="" && StringTools.startsWith(name,"flibopts_"))
									flibrem.set(name,null);
								if(flibd=="" && name.substr(0,8)=="flibdel_" && name.length>8) {
									flibrem.set(name,null);
									flibrem.set(name.substr(8),null);
								}
								
								if(name.length > 8 && name.startsWith("flibset_")) {
									var varn = name.substr(8);
									if(properties.exists(varn))
										properties.get(varn).y = t;
									else
										properties.set(varn,{x:null,y:t});
										
									t.data = tdMethod(mtSetter,x,y);
								}
								if(name.length > 8 && name.startsWith("flibget_")) {
									var varn = name.substr(8);
									if(properties.exists(varn))
										properties.get(varn).x = t;
									else
										properties.set(varn,{x:t,y:null});						
										
									t.data = tdMethod(mtGetter,x,y);
								}
							}
						case tdSlot(const,sid,_,_,_):
							var flibd = flibdel(t.name);
							var name = multiname(t.name);
							
							if(flibd=="flibdel")
								flibrem.set(name,null);
							if(flibd=="" && name.substr(0,8)=="flibdel_" && name.length>8) {
								flibrem.set(name,null);
								flibrem.set(name.substr(8),null);
							}
						default:
					}
				}
				
				var ntraits = [];
				for(t in i.traits) {
					switch(t.data) {
						case tdMethod(type,_,id):
							if(Type.enumEq(type,mtMethod)) {
								var name = multiname(t.name);
								if(!flibrem.exists(name))
									ntraits.push(t);
								else {
									methodid.remove(id);
								}
							}else
								ntraits.push(t);
						case tdSlot(const,_,_,_,_):
							var name = multiname(t.name);
							if(flibrem.exists(name))
								continue;
							if(!const) {	
								if(properties.exists(name)) {
									var p = properties.get(name);
									
									if(p.x!=null) p.x.name = t.name;
									if(p.y!=null) p.y.name = t.name;
									
									continue;
								}
							}
							ntraits.push(t);
						default:
							ntraits.push(t);
					}
				}
				
				i.traits = ntraits;
			}
		);
		
		getsets(abc.instances)
		getsets(abc.classes)

	
		//maps old method index, to new method index
		var methodset = new IntHash<Int>();
		var ind = 0;
		for(i in methodid) methodset.set(i,ind++);
		/*
		ind = 0;
		var i = 0;
		while(true) {
			if(i>=abc.methods.length) break;
			var method = abc.methods[i];
			if(methodset.exists(ind)) {
				i++;
				ind++;
				continue;
			}

			abc.methods.splice(i,1);
			ind++;
			continue;
		}
*/		
		var i = 0;
		while(true) {
			if(i>=abc.mbodies.length) break;
			var mbody = abc.mbodies[i];
			if(methodset.exists(mbody.method)) {
				i++;
				continue;
			}
			
			abc.mbodies.splice(i,1);
			continue;
		}
/*		
		for(i in abc.instances) {
			i.iinit = methodset.get(i.iinit);
			adtraits(i.traits);
		}
		for(i in abc.classes) {
			i.cinit = methodset.get(i.cinit);
			adtraits(i.traits);
		}
		for(i in abc.scripts) {
			i.init = methodset.get(i.init);
			adtraits(i.traits);
		}
		for(i in abc.mbodies) {
			i.method = methodset.get(i.method);
			adtraits(i.traits);
		}
		
		$(mixin adtraits(traits) {
			for(i in traits) {
				i.data = switch(i.data) {
					case tdFunction(sid,mid):
						tdFunction(sid,methodset.get(mid));
					case tdMethod(type,sid,mid):
						tdMethod(type,sid,methodset.get(mid));
					default: i.data;
				}
			}
		});
		*/
		var out = new BytesOutput();
		var writer = new flib.abc.Writer(out);
		writer.writeABC(abc);
		return out.getBytes();
	}
}
